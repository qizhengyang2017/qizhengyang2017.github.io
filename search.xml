<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[集群上安装的R包]]></title>
    <url>%2F2018%2F11%2F03%2F%E9%9B%86%E7%BE%A4%E4%B8%8A%E5%AE%89%E8%A3%85%E7%9A%84R%E5%8C%85%2F</url>
    <content type="text"><![CDATA[写了一个R script批量安装。1234567install.packages("devtools",repos="https://mirrors.tuna.tsinghua.edu.cn/CRAN")install.packages("dplyr",repos="https://mirrors.tuna.tsinghua.edu.cn/CRAN")install.packages("BiocManager",repos="https://mirrors.tuna.tsinghua.edu.cn/CRAN")BiocManager::install("ballgown", version = "3.8")BiocManager::install(genefilter", version = "3.8")devtools::install_github('alyssafrazee/RSkittleBrewer')BiocManager::install("methylKit", version = "3.8")]]></content>
  </entry>
  <entry>
    <title><![CDATA[JC-肿瘤组学-吴健民]]></title>
    <url>%2F2018%2F11%2F02%2FJC-%E8%82%BF%E7%98%A4%E7%BB%84%E5%AD%A6-%E5%90%B4%E5%81%A5%E6%B0%91%2F</url>
    <content type="text"><![CDATA[后面我都在想ballgown分析之后的q-value的问题。有的提问很精彩。 什么样的问题是好的问题？ 定义 交流实验思路 询问细节 统计 相关系数是线性回归里的东西 FDR 是一种对 p-value 进行校正的方法]]></content>
  </entry>
  <entry>
    <title><![CDATA[大概是我写的第一个脚本]]></title>
    <url>%2F2018%2F10%2F31%2F%E5%A4%A7%E6%A6%82%E6%98%AF%E6%88%91%E5%86%99%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E8%84%9A%E6%9C%AC%2F</url>
    <content type="text"><![CDATA[整理文件夹的时候，发现了2018年三月份写的一个脚本，作用是根据基因ID提取序列 123456789101112131415161718192021222324252627# use gene Id to extract sequenceout = []geneId = input('please input gene ID, seprate in space: ')path = input('please input file path: ')genelist = geneId.split()for gene in genelist: f=open(path) for line in f.readlines(): if line[0] == '&gt;': i = 0 if gene in line: out.append(line) i = 1 else: if i == 1: out.append(line) f.close()outfile=open('result.fa','w+')for line in out: outfile.write(line)outfile.close() # caculate running timeimport timeitstart = timeit.default_timer() stop = timeit.default_timer()print(stop - start)]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[集群上更新R并安装methylKit]]></title>
    <url>%2F2018%2F10%2F31%2F%E9%9B%86%E7%BE%A4%E4%B8%8A%E5%AE%89%E8%A3%85R%2F</url>
    <content type="text"><![CDATA[普通用户在集群上安装R主要的教程里面有一些需要注意的，安装bzip，要加入一个 -fPIC 到 CFLAG 。（在 Makefile中CFLAG=-fPIC -Wall -Winline -O2 -g…）在R安装configure之前需要注意设置环境变量123LD_LIBRARY_PATH=/home02/qizhengyang/packages/libexport CFLAGS="-I/home02/qizhengyang/packages/include"export LDFLAGS="-L/home02/qizhengyang/packages/lib" R安装完成之后123export R_HOME=$HOME/packages/Rexport R_LIBS=$HOME/packages/R/lib64/libraryexport PATH="$R_HOME/bin":$PATH 最后 source ~/.bashrc 装methyKit也是坑一堆。我下了autoconf-2.69，libxml2-2.7.2。源码安装。./configure –prefix=/home02/qizhengyang/packages]]></content>
      <tags>
        <tag>R</tag>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[trimmatic使用]]></title>
    <url>%2F2018%2F10%2F30%2Ftrimmatic%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[更改了一下之前的trimmatic脚本 12345678910111213#PBS -N trim#PBS -l nodes=2:ppn=10#PBS -q highho=/home02/qizhengyang/rna_work_place/rna_datacd $hodir=$ho/trim_resultfor i in *R1.fq.gzdo java -jar ~/softwares/Trimmomatic-0.38/trimmomatic-0.38.jar PE -threads 20 -phred33 \ $i $&#123;i/R1/R2&#125; -baseout $&#123;i/_R1/&#125; ILLUMINACLIP:/home02/qizhengyang/softwares/Trimmomatic-0.38/adapters/TruSeq3-PE.fa:2:30:10 LEADING:3 \ TRAILING:3 SLIDINGWINDOW:4:15 MINLEN:36done [qizhengyang@node1 rna_data]$ i=”abd”[qizhengyang@node1 rna_data]$ echo $icde [qizhengyang@node1 rna_data]$ echo ${i}cdeabdcde[qizhengyang@node1 rna_data]$ echo $i”cde”abdcde]]></content>
      <tags>
        <tag>Linux</tag>
        <tag>软件</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[R拆分文文件]]></title>
    <url>%2F2018%2F10%2F28%2FR%E6%8B%86%E5%88%86%E6%96%87%E6%96%87%E4%BB%B6%2F</url>
    <content type="text"><![CDATA[文件格式是 sample freqC aa 100 aa 23.4 .. .. bb 56 bb 12 本来是打算做成下面的格式： aa bb 23 45 34 32 .. .. 但是发现数据不等长，最终就只是拆分了文件 123456789101112# =======CHGtest&lt;-read.table("CHG_methunit_cov3_merged.DMC.txt",header = T)names&lt;-as.character(unique(test[,1])) #必须将因子转化成字符，不然assign函数报错namesfor (i in 1:length(names)) &#123; a&lt;-subset(test,test[,1] == names[i],select=c(freqC)) assign(names[i],a) #字符串转变量 df.now &lt;- get(names[i]) #获取变量 write.table(df.now, file = paste("CHG_", names[i], ".txt",sep=""),sep='\t',row.names = F)&#125;rm(list=ls())]]></content>
      <tags>
        <tag>R</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[十月倒数第二个星期三总结]]></title>
    <url>%2F2018%2F10%2F24%2F%E5%8D%81%E6%9C%88%E5%80%92%E6%95%B0%E7%AC%AC%E4%BA%8C%E4%B8%AA%E6%98%9F%E6%9C%9F%E4%B8%89%E6%80%BB%E7%BB%93%2F</url>
    <content type="text"><![CDATA[抄一篇文章 What does Stack Overflow want to be when it grows up? I sometimes get asked by regular people in the actual real world what it is that I do for a living, and here’s my 15 second answer: We build a sort of Wikipedia website for computer programmers to post questions and answers. It’s called Stack Overflow. As of last month, it’s been 10 years since Joel Spolsky and I started Stack Overflow. I currently do other stuff now, and I have since 2012, but if I will be know for anything when I’m dead, clearly it is going to be good Stack Overflow. Here’s where I’d normally segue into a bunch of rah-rah stuff about how great Stack Overflow is, and thus how implicitly great I am by association for being a founder, and all.]]></content>
  </entry>
  <entry>
    <title><![CDATA[简单的格式转换，try语句的使用]]></title>
    <url>%2F2018%2F10%2F23%2F%E7%AE%80%E5%8D%95%E7%9A%84%E6%A0%BC%E5%BC%8F%E8%BD%AC%E6%8D%A2%EF%BC%8Ctry%E8%AF%AD%E5%8F%A5%E7%9A%84%E4%BD%BF%E7%94%A8%2F</url>
    <content type="text"><![CDATA[脚本存放 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354#!/usr/bin/python# coding: utf-8# qizhengyang 20181022# 将格式调成methykit支持的格式file = open(&quot;mc.file.txt&quot;,&quot;w&quot;)file.write(&apos;chrBase&apos;+&apos;\t&apos;+&apos;chr&apos;+&apos;\t&apos;+&apos;base&apos;+&apos;\t&apos;+&apos;Strand&apos;+&apos;\t&apos;+&apos;coverage&apos;+&apos;\t&apos;+&apos;freqC&apos;+&apos;\t&apos;+&apos;\t&apos;&apos;freqT&apos;+&apos;\n&apos;)with open(&quot;test.txt&quot;) as mclines: mcfile = [[],[],[],[],[],[],[]] for mcline in mclines: #print(mclines) mcline = mcline.strip().split() if mcline[2] == &apos;+&apos;: mcline[2] = &apos;F&apos; else: mcline[2] = &apos;R&apos; mcfile[0] = mcline[0]+&apos;.&apos;+mcline[1] mcfile[1] = mcline[0] mcfile[2] = mcline[1] mcfile[3] = mcline[2] mcfile[4] = int(mcline[3]) + int(mcline[4]) try: mcfile[5] = round((int(mcline[3]) / mcfile[4])*100,2) except: mcfile[5] = 0.00 try: mcfile[6] = round((int(mcline[4]) / mcfile[4])*100,2) except: mcfile[6] = 0.00 file.write(mcfile[0]+&apos;\t&apos;+mcfile[1]+&apos;\t&apos;+mcfile[2]+&apos;\t&apos;+mcfile[3]+&apos;\t&apos;+str(mcfile[4])+&apos;\t&apos;+str(mcfile[5])+&apos;\t&apos;+str(mcfile[6])+&apos;\n&apos;)file.close() #bismark_methylation_extractor输出格式#scaffold_1 10 + 0 0 CG CGC#scaffold_1 11 - 0 0 CG CGC#scaffold_1 14 + 0 0 CG CGA#scaffold_1 15 - 4 0 CG CGG#scaffold_1 21 + 1 0 CG CGT#scaffold_1 22 - 5 0 CG CGA#scaffold_1 42 + 42 5 CG CGG#scaffold_1 43 - 65 5 CG CGC#methykit supporting format#chrBase chr base Strand coverage freqC freqT#scaffold_1.10 scaffold_1 10 F 0 0.0 0.0#scaffold_1.11 scaffold_1 11 R 0 0.0 0.0#scaffold_1.14 scaffold_1 14 F 0 0.0 0.0#scaffold_1.15 scaffold_1 15 R 4 100.0 0.0#scaffold_1.21 scaffold_1 21 F 1 100.0 0.0#scaffold_1.22 scaffold_1 22 R 5 100.0 0.0#scaffold_1.42 scaffold_1 42 F 47 89.36 10.64#scaffold_1.43 scaffold_1 43 R 70 92.86 7.14]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[对甲基化位点进行排序]]></title>
    <url>%2F2018%2F10%2F23%2F%E5%AF%B9%E7%94%B2%E5%9F%BA%E5%8C%96%E4%BD%8D%E7%82%B9%E8%BF%9B%E8%A1%8C%E6%8E%92%E5%BA%8F%2F</url>
    <content type="text"><![CDATA[对mC文件分正负链，按位点进行排序。 123456789101112131415161718192021222324252627282930313233343536373839404142#!/usr/bin/python# -*- coding: utf-8 -*-# qizhengyang 20181023# 对甲基化位点信息的文件按位点大小进行排序with open('test.txt') as lines: F_sorting = [] R_sorting = [] all_sorting = [] for line in lines: line = line.strip().split() line[2] = int(line[2]) line = tuple(line) if line[3] == 'F': F_sorting.append(line) else: R_sorting.append(line) F_sorted = sorted(F_sorting, key=lambda s: s[2]) R_sorted = sorted(R_sorting, key=lambda s: s[2]) all_sorted = F_sorted + R_sortedfile_sorted = open('file_sorted.txt','w')for line in all_sorted: line = line[0] + '\t'+ line[1] + '\t'+ str(line[2]) + '\t'+ line[3] + '\t'+ line[4] + '\t' + line[5] + '\t' + line[6] + '\n' file_sorted.write(line)file_sorted.close()# 结果如下# chr1.528 chr1 528 F 4 50.00 50.00# chr1.702 chr1 702 F 8 100.00 0.00# chr1.733 chr1 733 F 7 85.71 14.29# chr1.755 chr1 755 F 3 100.00 0.00# chr1.958 chr1 958 F 10 100.00 0.00# chr1.1111 chr1 1111 F 7 85.71 14.29# chr1.1207 chr1 1207 F 8 100.00 0.00# chr1.1294 chr1 1294 F 7 100.00 0.00# chr1.1333 chr1 1333 F 9 77.78 22.22# chr1.1569 chr1 1569 F 3 100.00 0.00# chr1.1629 chr1 1629 F 5 100.00 0.00# chr1.1668 chr1 1668 F 5 100.00 0.00# chr1.1671 chr1 1671 F 6 66.67 33.33# chr1.1695 chr1 1695 F 3 100.00 0.00]]></content>
      <tags>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[10.18~10.20中期检查PPT内容]]></title>
    <url>%2F2018%2F10%2F18%2F10-18-10-20%E4%B8%AD%E6%9C%9F%E6%A3%80%E6%9F%A5PPT%E5%86%85%E5%AE%B9%2F</url>
    <content type="text"><![CDATA[英文关键词： 我需要明确知道的事情：DNA甲基化： 被甲基化的胞嘧啶所占的比列 染色体上甲基化水平的分布 转录组分析（lncRNA文库）： 有多少转录因子基因差异表达，与体细胞胚发生或DNA甲基化相关的转录因子有哪些？ 透射电镜观察愈伤组织的超微结构：（我的材料各系之间没有明显差异!） 物质和能量基础：细胞核大、细胞质浓，富含各类细胞器。 生理隔离：细胞壁加厚。]]></content>
  </entry>
  <entry>
    <title><![CDATA[书法作品]]></title>
    <url>%2F2018%2F10%2F16%2F%E4%B9%A6%E6%B3%95%E4%BD%9C%E5%93%81%2F</url>
    <content type="text"><![CDATA[几幅书法作品]]></content>
  </entry>
  <entry>
    <title><![CDATA[gff3文件提取序列改进版]]></title>
    <url>%2F2018%2F10%2F16%2Fgff3%E6%96%87%E4%BB%B6%E6%8F%90%E5%8F%96%E5%BA%8F%E5%88%97%E6%94%B9%E8%BF%9B%E7%89%88%2F</url>
    <content type="text"><![CDATA[将染色体名与序列放在一列 染色体条件判断 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162#!/usr/bin/env python# created on 2018/10/16, Qizhengyang# 处理gff3文件，提取出ID，位置信息等## 建立基因位置信息文件import regene = open('gene.gff3','w')with open('csi.gene.models.gff3','r') as lines: for line in lines: line = line.strip().split('\t') if line[2] == 'gene': line[3] = str(int(line[3]) - 2000) if int(line[3]) &lt; 0: line[3] = str(1) line[4] = str(int(line[4]) + 2000) a = re.search(r'ID=(.*);',line[8]) line[8] = a.group()[3:len(a.group())-1] line1 = line[0] + '\t' + line[8] + '\t' + line[6] + '\t' + line[3] + '\t' + line[4] + '\n' gene.write(line1)gene.close()## 一条染色体当成一行fr = open('csi.chromosome.fa','r')fw = open('csi.chromosome_use.txt','w')line = fr.read()r = line.replace('\n','')s = re.sub('&gt;','\n&gt;',r)s = s[1:]fw.write(s)fr.close()fw.close()## 序列互补def reverse_complement(seq): ntComplement = &#123;'A':'T', 'C':'G', 'T':'A', 'G':'C', 'N':'N'&#125; revSeqList = list(seq) revComSeqList = [ntComplement[k] for k in revSeqList] revComSeq = ''.join(revComSeqList) return revComSeq## 生成基因序列chromosome_use = open('csi.chromosome_use.txt','r')chromosome_use_lines = chromosome_use.readlines()chromosome_use.close()gene_seq = open('gene_seq.fa','w')with open('gene.gff3','r') as lines: for line in lines: line = line.strip().split() for each_chromosome in chromosome_use_lines: if line[0] == each_chromosome[1:len(line[0])+5].strip('ATGC'): start = int(line[3]) + len(line[0]) - 1 end = int(line[4]) + len(line[0]) -1 if line[2] == '+': sequence = each_chromosome[start:(end + 1)].strip() # strip一定要加 else: sequence = each_chromosome[start:(end + 1)][::-1].strip() sequence = reverse_complement(sequence) gene_seq.write('&gt;' + line[1] + '\t' + line[2] + '\n' + sequence + '\n')gene_seq.close()]]></content>
  </entry>
  <entry>
    <title><![CDATA[PS实战]]></title>
    <url>%2F2018%2F10%2F11%2FPS%E5%AE%9E%E6%88%98%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[根据gff3文件提取序列]]></title>
    <url>%2F2018%2F10%2F06%2F%E6%A0%B9%E6%8D%AEgff3%E6%96%87%E4%BB%B6%E6%8F%90%E5%8F%96%E5%BA%8F%E5%88%97%2F</url>
    <content type="text"><![CDATA[思路： 一条染色体作为一条字符串 gff3文件中有位置信息和正负链信息 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596#!/usr/bin/env python# created on 2018/10/6, Qizhengyang# 处理gff3文件，提取出ID，位置信息等# 建立type = gene的gff3文件gene = open('gene.gff','w')with open('csi.gene.models.gff3','r') as lines: for line in lines: line = line.strip().split('\t',3) if line[2] == 'gene': line1 = line[0] + '\t' + line[1] + '\t' + line[2] + '\t' + line[3] +'\n' gene.write(line1)gene.close()## 每条染色体单独成一个文件 shell# sed -n '2,480014p' csi.chromosome.fa &gt; chr1.txt# sed -n '480016,993966p' csi.chromosome.fa &gt; chr2.txt# sed -n '993968,1472535p' csi.chromosome.fa &gt; chr3.txt# sed -n '1472537,1805088p' csi.chromosome.fa &gt; chr4.txt# sed -n '1805090,2407524p' csi.chromosome.fa &gt; chr5.txt# sed -n '2407526,2760518p' csi.chromosome.fa &gt; chr6.txt# sed -n '2760520,3297270p' csi.chromosome.fa &gt; chr7.txt# sed -n '3297272,3675785p' csi.chromosome.fa &gt; chr8.txt# sed -n '3675787,3983299p' csi.chromosome.fa &gt; chr9.txt# sed -n '3983301,$p' csi.chromosome.fa &gt; chrUn.txt## 修改位置信息，提取出ID，修改格式genePosition = open('genePosition','w')import rewith open('gene.gff','r') as lines: for line in lines: line = line.strip().split() line[3] = str(int(line[3]) - 2000) line[4] = str(int(line[4]) + 2000) a = re.search(r'ID=(.*);',line[8]) line[8] = a.group()[3:len(a.group())-1] line1 = line[8] + '\t' + line[6] + '\t' + line[3] + '\t' + line[4] + '\n' genePosition.write(line1)genePosition.close()## 定义一个函数，求每条染色体的序列def chromesome(filename): chr = '' with open(filename,'r') as lines: for line in lines: line = line.strip() chr += line return chrchr1 = chromesome("chr1.txt")chr2 = chromesome("chr2.txt")chr3 = chromesome("chr3.txt")chr4 = chromesome("chr4.txt")chr5 = chromesome("chr5.txt")chr6 = chromesome("chr6.txt")chr7 = chromesome("chr7.txt")chr8 = chromesome("chr8.txt")chr9 = chromesome("chr9.txt")chrUn = chromesome("chrUn.txt")## ipython下 %run seq.py运行 ## 正负分开 F = open("F.txt","w")with open('genePosition.txt','r') as lines: for line in lines: line = line.strip().split() if line[2] == '+': F.write(line[0] + '\t' + line[1] + '\t' + line[2] + '\t' + line[3] + '\n') F.close()R = open("R.txt","w")with open('genePosition.txt','r') as lines: for line in lines: line = line.strip().split() if line[2] == '-': R.write(line[0] + '\t' + line[1] + '\t' + line[2] + '\t' + line[3] + '\n') R.close() 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899#!/usr/bin/env python# created on 2018/10/6, Qizhengyang# 根据gff3文件提取序列，反义链seqF = open('seqR.txt','w')with open('R.txt','r') as lines: def chromesome(filename): chr = '' with open(filename,'r') as lines: for line in lines: line = line.strip() chr += line return chr chr1 = chromesome("chr1.txt") chr2 = chromesome("chr2.txt") chr3 = chromesome("chr3.txt") chr4 = chromesome("chr4.txt") chr5 = chromesome("chr5.txt") chr6 = chromesome("chr6.txt") chr7 = chromesome("chr7.txt") chr8 = chromesome("chr8.txt") chr9 = chromesome("chr9.txt") chrUn = chromesome("chrUn.txt")# 碱基互补配对 def reverse_complement(seq): ntComplement = &#123;'A':'T', 'C':'G', 'T':'A', 'G':'C', 'N':'N'&#125; revSeqList = list(seq) revComSeqList = [ntComplement[k] for k in revSeqList] revComSeq = ''.join(revComSeqList) return revComSeq for line in lines: line = line.strip().split() if line[0] == 'chr1': start = int(line[3]) - 1 end = int(line[4]) -1 sequence = chr1[start:(end + 1)][::-1] revComSeq = reverse_complement(sequence) seqF.write('&gt;' + line[1] + '\t' + line[2] + '\n' + revComSeq + '\n') elif line[0] == 'chr2': start = int(line[3]) - 1 end = int(line[4]) -1 sequence = chr2[start:(end + 1)] revComSeq = reverse_complement(sequence) seqF.write('&gt;' + line[1] + '\t' + line[2] + '\n' + revComSeq + '\n') elif line[0] == 'chr3': start = int(line[3]) - 1 end = int(line[4]) -1 sequence = chr3[start:(end + 1)] revComSeq = reverse_complement(sequence) seqF.write('&gt;' + line[1] + '\t' + line[2] + '\n' + revComSeq + '\n') elif line[0] == 'chr4': start = int(line[3]) - 1 end = int(line[4]) -1 sequence = chr4[start:(end + 1)] revComSeq = reverse_complement(sequence) seqF.write('&gt;' + line[1] + '\t' + line[2] + '\n' + revComSeq + '\n') elif line[0] == 'chr5': start = int(line[3]) - 1 end = int(line[4]) -1 sequence = chr5[start:(end + 1)] revComSeq = reverse_complement(sequence) seqF.write('&gt;' + line[1] + '\t' + line[2] + '\n' + revComSeq + '\n') elif line[0] == 'chr6': start = int(line[3]) - 1 end = int(line[4]) -1 sequence = chr6[start:(end + 1)] revComSeq = reverse_complement(sequence) seqF.write('&gt;' + line[1] + '\t' + line[2] + '\n' + revComSeq + '\n') elif line[0] == 'chr7': start = int(line[3]) - 1 end = int(line[4]) -1 sequence = chr7[start:(end + 1)] revComSeq = reverse_complement(sequence) seqF.write('&gt;' + line[1] + '\t' + line[2] + '\n' + revComSeq + '\n') elif line[0] == 'chr8': start = int(line[3]) - 1 end = int(line[4]) -1 sequence = chr8[start:(end + 1)] revComSeq = reverse_complement(sequence) seqF.write('&gt;' + line[1] + '\t' + line[2] + '\n' + revComSeq + '\n') elif line[0] == 'chr9': start = int(line[3]) - 1 end = int(line[4]) -1 sequence = chr9[start:(end + 1)] revComSeq = reverse_complement(sequence) seqF.write('&gt;' + line[1] + '\t' + line[2] + '\n' + revComSeq + '\n') else: start = int(line[3]) - 1 end = int(line[4]) -1 sequence = chrUn[start:(end + 1)] revComSeq = reverse_complement(sequence) seqF.write('&gt;' + line[1] + '\t' + line[2] + '\n' + revComSeq + '\n')seqF.close() 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879#!/usr/bin/env python# created on 2018/10/6, Qizhengyang# 根据gff3文件提取序列，正义链seqF = open('seqF.txt','w')with open('F.txt','r') as lines: def chromesome(filename): chr = '' with open(filename,'r') as lines: for line in lines: line = line.strip() chr += line return chr chr1 = chromesome("chr1.txt") chr2 = chromesome("chr2.txt") chr3 = chromesome("chr3.txt") chr4 = chromesome("chr4.txt") chr5 = chromesome("chr5.txt") chr6 = chromesome("chr6.txt") chr7 = chromesome("chr7.txt") chr8 = chromesome("chr8.txt") chr9 = chromesome("chr9.txt") chrUn = chromesome("chrUn.txt") for line in lines: line = line.strip().split() if line[0] == 'chr1': start = int(line[3]) - 1 end = int(line[4]) -1 sequence = chr1[start:(end + 1)] seqF.write('&gt;' + line[1] + '\t' + line[2] + '\n' + sequence + '\n') elif line[0] == 'chr2': start = int(line[3]) - 1 end = int(line[4]) -1 sequence = chr2[start:(end + 1)] seqF.write('&gt;' + line[1] + '\t' + line[2] + '\n' + sequence + '\n') elif line[0] == 'chr3': start = int(line[3]) - 1 end = int(line[4]) -1 sequence = chr3[start:(end + 1)] seqF.write('&gt;' + line[1] + '\t' + line[2] + '\n' + sequence + '\n') elif line[0] == 'chr4': start = int(line[3]) - 1 end = int(line[4]) -1 sequence = chr4[start:(end + 1)] seqF.write('&gt;' + line[1] + '\t' + line[2] + '\n' + sequence + '\n') elif line[0] == 'chr5': start = int(line[3]) - 1 end = int(line[4]) -1 sequence = chr5[start:(end + 1)] seqF.write('&gt;' + line[1] + '\t' + line[2] + '\n' + sequence + '\n') elif line[0] == 'chr6': start = int(line[3]) - 1 end = int(line[4]) -1 sequence = chr6[start:(end + 1)] seqF.write('&gt;' + line[1] + '\t' + line[2] + '\n' + sequence + '\n') elif line[0] == 'chr7': start = int(line[3]) - 1 end = int(line[4]) -1 sequence = chr7[start:(end + 1)] seqF.write('&gt;' + line[1] + '\t' + line[2] + '\n' + sequence + '\n') elif line[0] == 'chr8': start = int(line[3]) - 1 end = int(line[4]) -1 sequence = chr8[start:(end + 1)] seqF.write('&gt;' + line[1] + '\t' + line[2] + '\n' + sequence + '\n') elif line[0] == 'chr9': start = int(line[3]) - 1 end = int(line[4]) -1 sequence = chr9[start:(end + 1)] seqF.write('&gt;' + line[1] + '\t' + line[2] + '\n' + sequence + '\n') else: start = int(line[3]) - 1 end = int(line[4]) -1 sequence = chrUn[start:(end + 1)] seqF.write('&gt;' + line[1] + '\t' + line[2] + '\n' + sequence + '\n')seqF.close() ipython 运行命令 %run R.py cat seqF.txt seqR.txt &gt; all_gene.fagrep ‘30058,30062p’ all_gene.fatar czf all_gene.fa.tar.gz all_gene.fa]]></content>
  </entry>
  <entry>
    <title><![CDATA[林书豪]]></title>
    <url>%2F2018%2F10%2F04%2F%E6%9E%97%E4%B9%A6%E8%B1%AA%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[代码整理]]></title>
    <url>%2F2018%2F09%2F27%2F%E4%BB%A3%E7%A0%81%E6%95%B4%E7%90%86%2F</url>
    <content type="text"><![CDATA[一些 Linux 命令。12345678910111213## 后台运行nohup command &gt; myout.file 2&gt;&amp;1 &amp;## sam to bamnohup samtools view -bS -o s717-1.bam s717-1.clean_h2_t0_bismark_bt2_pe.sorted.sam &gt; s717-1.out 2&gt;&amp;1 &amp;samtools sort test.bam -o sorted.test.bam## 删除行sed -i &apos;27427009d&apos; s717-1.clean_h2_t0_bismark_bt2_pe.sorted.sam # -i 直接修改## 显示行sed -n &apos;27427009p&apos; s717-1.clean_h2_t0_bismark_bt2_pe.sorted.sam## samtools 建索引samtools index $i## samtools 建bam测试文件samtools view s185-1.clean_h2_t0_bismark_bt2_pe.sorted.bam | head -n1000 &gt; test.bam 12## 查文件grep 正则表达式ll | grep &apos;.*\.[o,e][0-9][0-9]*&apos; # [o,e]+数字 chmod 755 file.R./file.R #这种方式下，把file.R改为file.sh或file …，在Ubuntu下都能运行 如果你用 python xxoo.py 来运行，那么写不写都没关系，如果要用 ./xxoo.py 那么就必须加这行，这行被称为 shebang, 用来为脚本语言指定解释器.通常认为用 #!/usr/bin/env python 要比 #!/usr/bin/python 更好，因为 python 解释器有时并不安装在默认路径，例如在 virtualenv 中。 getwd()[1] “/home02/qizhengyang/methSAM”dir() [1] “185sort.e797100” [2] “bam” [3] “myplot.jpeg”]]></content>
  </entry>
  <entry>
    <title><![CDATA[blast自动化]]></title>
    <url>%2F2018%2F09%2F20%2Fblast%E8%87%AA%E5%8A%A8%E5%8C%96%2F</url>
    <content type="text"><![CDATA[1234567891011121314151617181920212223242526272829303132333435363738394041424344#!/usr/bin/env python# -*- coding: utf-8 -*-"""Created on Thu Sep 20 20:49:38 2018description:"""#%%生成gene-annotation文件#anno = &#123;&#125;#with open('csi.gene.annotation.txt','r') as lines:# for line in lines:# line = line.split('\t')# id = line[0][::-1].split('.',1)[1][::-1] + '\t'# anno[id] = line[1]# # with open('csi.gene.annotation.output.txt','a') as output:# for id, annot in anno.items():# output.write(id + annot)#%%import sysdef produceDict(filename): annot = &#123;&#125; with open(filename,'r') as f: for line in f: line = line.strip().split('\t') id = line[0] annot[id] = line[1] return annotannot = produceDict(sys.argv[1])IDs = open(sys.argv[2],'r')OUT = open(sys.argv[3],'w')# 此处不能反斜杠换行，否则会有空格OUT.write('query\tsubject\tdescription\t% identity\talignment length\tmismatches\tgap opens\tq. start\tq. end\ts. start\ts. end\tevalue\tbit score\n')for line in IDs: if line.startswith('#'): continue line = line.strip().split('\t',2) id = line[1] try: OUT.write(line[0] + '\t' + id + '\t' + annot[id] + '\t' +line[2]+ '\n') except KeyError: OUT.write(line[0] + '\t' + id + '\t' + '' + '\t' +line[2]+ '\n') print("warning: can't find gene: " + id)IDs.close()OUT.close() 用法： python annot.py csi.gene.annotation.output.txt feng.txt final.txt]]></content>
  </entry>
  <entry>
    <title><![CDATA[TAIR ID to entrez ID]]></title>
    <url>%2F2018%2F09%2F20%2FTAIR-ID-to-entrez-ID%2F</url>
    <content type="text"><![CDATA[David gene ID conversion]]></content>
  </entry>
  <entry>
    <title><![CDATA[today]]></title>
    <url>%2F2018%2F09%2F19%2Ftoday%2F</url>
    <content type="text"><![CDATA[reference gene list的选择 网络图讲故事 谷歌搜索”big data AND visualization” 探索单个主体的关联网络 查找关键角色这是我想要做的 划清敌友界限 探索关联网络的变化 揭示隐藏的关系]]></content>
  </entry>
  <entry>
    <title><![CDATA[R富集泡泡图]]></title>
    <url>%2F2018%2F09%2F17%2FR%E5%AF%8C%E9%9B%86%E6%B3%A1%E6%B3%A1%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[12345678910111213141516171819202122232425df&lt;-read.csv("GoTerm.csv",header = T)colnames(df)[1]&lt;-"Description"df$GeneRatio&lt;-df$Number.in.input.list/df$Number.in.BG.Refsortdf&lt;-df[order(df$GeneRatio),]sortdf$Description&lt;-factor(sortdf$Description,levels = sortdf$Description)library(ggplot2)pl&lt;-ggplot(sortdf,aes(GeneRatio,Description, colour=p.value))+#横坐标、纵坐标、颜色代表p-value geom_point(aes(size=Number.in.input.list))+#圆点的大小代表组内基因数 scale_color_gradientn(colours=c("red","yellow"))+#可以自己改颜色 #圆点的大小代表Number of significant genes scale_size_continuous(range = c(2,8.2))+#圆点的大小范围 scale_x_continuous(limits = c(0.04,0.21))+#设置x轴范围 theme_bw(15)+#背景变成白色 ylab("")+ theme(legend.position=c(1,0),legend.justification = c(1,0), legend.title=element_text(size=14), legend.text=element_text(size=9),legend.box = "horizontal")+#legend画在右下角 #下面两行让legend融入图 theme(legend.background = element_blank())+#移除legend整体的边框 theme(legend.key = element_blank())#移除legend每个项目周围的边框pl## Rstudio保存 width=1100 higth=800 svg]]></content>
  </entry>
  <entry>
    <title><![CDATA[从blastp中提取同源的拟南芥AT号]]></title>
    <url>%2F2018%2F09%2F17%2F%E4%BB%8Eblastp%E4%B8%AD%E6%8F%90%E5%8F%96%E5%90%8C%E6%BA%90%E7%9A%84%E6%8B%9F%E5%8D%97%E8%8A%A5AT%E5%8F%B7%2F</url>
    <content type="text"><![CDATA[1234567891011121314151617181920212223242526272829303132#!/usr/bin/env python# -*- coding: utf-8 -*-"""Created on Mon Sep 17 15:53:15 2018description: csi to AT"""import sysUSAGE = "\nusage: python %s sequences.fasta id_list out.fasta\n" % sys.argv[0]if len(sys.argv) != 4: print(USAGE) sys.exit()def parseBlastp(filename): csi_at = &#123;&#125; with open(filename, 'r') as fh: for line in fh: query = line.split()[1][::-1].split(".",1)[1][::-1] at = line.split()[5][6:] csi_at[query] = at return csi_atcsi_at = parseBlastp(sys.argv[1])IDs = open(sys.argv[2], 'r')OUT = open(sys.argv[3], 'w')for line in IDs: id = line.rstrip("\n") try: OUT.write(id + "\t" + csi_at[id] + "\n") except KeyError: print("Warning: can't find gene: " + id) IDs.close()OUT.close()]]></content>
  </entry>
  <entry>
    <title><![CDATA[常用Linux命令]]></title>
    <url>%2F2018%2F09%2F13%2F%E5%B8%B8%E7%94%A8Linux%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[free -g # 内存ls -lhdf -h #磁盘]]></content>
  </entry>
  <entry>
    <title><![CDATA[热图]]></title>
    <url>%2F2018%2F09%2F13%2F%E7%83%AD%E5%9B%BE%2F</url>
    <content type="text"><![CDATA[又一次义务劳动1234567891011121314library(gplots)data &lt;- read.csv("121.csv",header = T)heat_data &lt;- as.matrix(data[,2:length(data)])library(showtext)setEPS()postscript("moxq1.eps", width = 15, height = 7)showtext_begin()# cexRow cexCol调labelheatmap.2(heat_data,col = greenred, trace = "none", density.info = "none", key.ylab = '', key.xlab = '', labRow = as.character(data[,1]) , scale = 'column', dendrogram = 'both', keysize = 1.0, srtRow = 315,cexRow = 0.8,srtCol=35,cexCol=0.8)showtext_end()dev.off() 之后用Adobe Illustrator CC 2018]]></content>
  </entry>
  <entry>
    <title><![CDATA[顶级风险投资机构的日常]]></title>
    <url>%2F2018%2F09%2F12%2F%E9%A1%B6%E7%BA%A7%E9%A3%8E%E9%99%A9%E6%8A%95%E8%B5%84%E6%9C%BA%E6%9E%84%E7%9A%84%E6%97%A5%E5%B8%B8%2F</url>
    <content type="text"><![CDATA[对冲基金 一万多家VC 钱市场上有的是股权投资 二级市场投资发现项目、找到项目研究 出差]]></content>
  </entry>
  <entry>
    <title><![CDATA[由Id提取Seq]]></title>
    <url>%2F2018%2F09%2F10%2F%E7%94%B1Id%E6%8F%90%E5%8F%96Seq%2F</url>
    <content type="text"><![CDATA[今天没午睡，没午睡，没有睡意。无法确定的印象如同海上漂浮的物体。为什么会惧怕它下沉？无法与现有的知识体系（日常经验）/行为方式/想象建立起联系。Transfer IDs by BLAST Job ID: 761094389 字符串反转 正则表达式（没有实质性的了解） 异常处理 字典，键重复，值为最后一个1234567891011121314151617181920212223242526272829303132333435363738#!/usr/bin/env python# -*- coding: utf-8 -*-"""Created on Mon Sep 10 20:03:51 2018description: 提取指定ID的序列"""import sysUSAGE = "\nusage: python %s sequences.fasta id_list out.fasta\n" % sys.argv[0]if len(sys.argv) != 4: print(USAGE) sys.exit()def parseFasta(filename): fas = &#123;&#125; id = None with open(filename, 'r') as fh: for line in fh: if line[0] == '&gt;': header = line[1:].rstrip() # 反转，设置最大分割，再反转 id = header[::-1].split(".",1)[1][::-1] fas[id] = [] else: fas[id].append(line.rstrip()) for id, seq in fas.items(): fas[id] = ''.join(seq) return fasfas = parseFasta(sys.argv[1])IDs = open(sys.argv[2], 'r')OUT = open(sys.argv[3], 'w')for line in IDs: id = line.rstrip("\n") try: OUT.write("&gt;" + id + "\n" + fas[id] + "\n") except KeyError: print("Warning: can't find gene: " + id) IDs.close()OUT.close() 用法：python extract_seqs_by_ids.py csi.peptide.fa id_list.txt out.fa 感谢]]></content>
      <tags>
        <tag>bioinfo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PPT 快捷键]]></title>
    <url>%2F2018%2F09%2F06%2FPPT-%E5%BF%AB%E6%8D%B7%E9%94%AE%2F</url>
    <content type="text"><![CDATA[1、快速复制幻灯片或者图片文字选中复制对象 –→ Ctrl+D 2、垂直、水平方向移动图片文字选中移动对象 –→ 按住Shift 3、快速复制并移动图片文字选中复制对象 –→ 按住Ctrl + 按住鼠标左键进行拖动 参考线又是可以灵活移动的 4、绘制正方形正圆正三角形等选择图形工具 –→ 按住Shift –→ 拖动鼠标加上Ctrl，可以以鼠标为中心绘制图形； 5、等比例放大缩小图片选中操作对象 –→ 按住Shift –→ 拖动图片四个顶点处的控点也可以加上Ctrl，以图片为中心等比列放大缩小； 6、关于线段的伸长缩小选中对象 –→ 按住Shift –→ 拖动控点可以避免伸缩线段时更改线段的角度问题； 7、微调图片文字位置不知道大家有没有发现，平时在拖动对象时，都是一跳一跳的，很难很精准的把他们放在一个合适的位置上，解决办法：选中对象 –→ 按住Alt –→ 鼠标拖动同样在绘制图形或者放大缩小图片时也可按住Alt微调； 8、键盘调整图片大小位置（微调图片位置）选中对象 –→ 按住Ctrl –→ 上下左右方向键（微调图片大小）选中对象 –→ 按住Ctrl+Shift –→ 上下左右方向键（微调图片角度）选中对象 –→ 按住Ctrl+Alt –→ 左右方向键 9、图形文字组合选中对象 –→ Ctrl+G 10、解除组合选中对象 –→ Ctrl+Shift+G]]></content>
  </entry>
  <entry>
    <title><![CDATA[Sep-5]]></title>
    <url>%2F2018%2F09%2F05%2FSep-5%2F</url>
    <content type="text"><![CDATA[批量修改文件名1for files in `ls`; do mv $files &quot;MCK&quot;$files; done 1du -sh foo # 查看目录大小 我将文件夹加了MCK前缀，gtf文件也加了MCK前缀。]]></content>
      <tags>
        <tag>linux</tag>
        <tag>任务</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[windows blast+]]></title>
    <url>%2F2018%2F09%2F04%2Fwindows-blast%2B%2F</url>
    <content type="text"><![CDATA[下载网址ftp://ftp.ncbi.nlm.nih.gov/blast/executables/blast+/LATEST/双击exe文件即可，安装程序会自动设置环境变量。blastn -version 查看版本信息]]></content>
  </entry>
  <entry>
    <title><![CDATA[Bash 逻辑组合]]></title>
    <url>%2F2018%2F09%2F04%2FBash-%E9%80%BB%E8%BE%91%E7%BB%84%E5%90%88%2F</url>
    <content type="text"><![CDATA[command1 &amp;&amp; command2 前者执行成功执行后者command1 &amp;&amp; command2 前者执行失败执行后者]]></content>
  </entry>
  <entry>
    <title><![CDATA[Python 文件读写]]></title>
    <url>%2F2018%2F09%2F04%2FPython-%E6%96%87%E4%BB%B6%E8%AF%BB%E5%86%99%2F</url>
    <content type="text"><![CDATA[Python处理文本123456提取文件中特定列with open("s717-2_CHH.filter.txt") as f: for line in f: list = line.rstrip().split() with open("s717-2_CHH.txt", "a") as out: out.write('%s\t%s\t%s\n'%(list[1], list[2], list[2])) 123增加一行sed -i &apos;1i chrom\tchromStart\tchromEnd&apos; output1.txt #上一行sed -i &apos;1a chrom\tchromStart\tchromEnd&apos; output1.txt #下一行]]></content>
  </entry>
  <entry>
    <title><![CDATA[Sep-3]]></title>
    <url>%2F2018%2F09%2F03%2FSep-3%2F</url>
    <content type="text"><![CDATA[“当您使用〖发送至Kindle〗电子邮箱发送个人文件时，您的文件会自动保存到Kindle图书馆中。”如果禁用，则我发送至Kindle电子邮箱的文件不会出现在Kindle图书馆中。 我删除了某条记录之后，发现这条记录里有我想了解的信息。 我打算将smartypants改回true。改之前再试一试，我能在editplus上打出中文破折号（一个全角字符）。 实验结果，会渲染成占两个全角字符的破折号，不能加空格。 我不打算将smartypants改为true了。 我打算删掉Runaway Baby。理由：太长。 紧接着数据，即使在中文输入状态下，点还是半角的点，不是句号。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Aug-31]]></title>
    <url>%2F2018%2F08%2F31%2FAug-31%2F</url>
    <content type="text"><![CDATA[单击鼠标会使神经麻木。如果结果没有变化，我无法确定是否正确执行了某一步操作。]]></content>
  </entry>
  <entry>
    <title><![CDATA[Aug-30]]></title>
    <url>%2F2018%2F08%2F30%2FAug-30%2F</url>
    <content type="text"><![CDATA[昨天，我给人分享了Adobe cc 2018。里面有三个软件，分别是ps, ai, lr。但是我想是否当时的链接网盘里还要其他的软件，比如Pr。我是通过一个微信公众号获取的网盘链接，是不是叫“学苑君”，我记得我不太喜欢这个公众号，因为它分享的资料很大、很杂，它是一个网络搜集者。我重新关注过这个公众号，一切都很像，但是我怎么能确定确实是这个公众号？演绎和归纳，是两种数学证明的方式。我害怕的是失去渠道。 我用搜狗微信搜索“adobe acrobat reader”，得到这个链接Adobe Acrobat Pro 2017破解教程 能用！但是我的账户名（一打开就有）为什么是qi zhengyangさん（先生）,掺杂日语平假名。]]></content>
  </entry>
  <entry>
    <title><![CDATA[处理BS数据]]></title>
    <url>%2F2018%2F08%2F29%2F%E5%A4%84%E7%90%86BS%E6%95%B0%E6%8D%AE%2F</url>
    <content type="text"><![CDATA[用亚硫酸氢盐处理DNA之后，the vast majority of 未被甲基化的C会以T的形式出现，whereas 甲基化的C largely protected from bisulphite-induced conversion。 to culculate absolute DNA methylation levels from bisulphite-sequencing data，sequencing reads are aligned to the positions in the reference genome from which they were most likely to be derived, and the percentage of Cs and Ts are determined among all reads aligned to each C in the genomic DNA sequence.]]></content>
  </entry>
  <entry>
    <title><![CDATA[DNA甲基化与自闭症]]></title>
    <url>%2F2018%2F08%2F26%2FDNA%E7%94%B2%E5%9F%BA%E5%8C%96%E4%B8%8E%E8%87%AA%E9%97%AD%E7%97%87%2F</url>
    <content type="text"><![CDATA[摘要：越来越多的证据表明自闭症谱系障碍（ASD）中基因与环境之间存在复杂的相互作用，包括染色质基因中罕见的从头突变，例如Rett综合征中的methyl-CpG结合蛋白2（MECP2)。基因组序列、基因途径和DNA甲基化的全基因组研究为ASD提供了有价值的机制见解。 词汇： autism spectrum disorder:自闭症谱系障碍 加入spectrum代表自闭症本身的多元性。1 CpG islands: CpG密度极高的区域(&lt; 1 kb)。 Gene body: 基因组上从转录起始位点到终止位点的一段区域。]]></content>
  </entry>
  <entry>
    <title><![CDATA[she - from Ed Sheeran]]></title>
    <url>%2F2018%2F08%2F25%2Fshe-from-Ed-Sheeran%2F</url>
    <content type="text"><![CDATA[一首歌的歌词，来自Ed Sheeran Patience, my enemyAnd loving’s my friendIt’s harder to leaveWith my heart on my sleeveThan to stay and just pretendOh, she knows me so wellOh, she knows me like I know myself]]></content>
  </entry>
  <entry>
    <title><![CDATA[Aug-25]]></title>
    <url>%2F2018%2F08%2F25%2FAug-25%2F</url>
    <content type="text"><![CDATA[我现在或许比以往任何时候需要书籍（小说）——杰克·凯鲁亚克、加缪、海明威……中国当代的文人（一定有！）。我现在完全没有挣钱的技能（人与人的交流、人与人之间相互帮助）。直面内心的对话。焦虑伴随失眠。我还在用家里的钱，用家里的钱买饭、买书、买雀巢咖啡。我还把时间花在担心失眠的问题上，我应该每时每刻在工作才对。学习技能！ 今天晚上开始尝试学习新的英文书写方式（重要）！！听英文播客节目。游泳&gt;1000米。最后一个回寝室。喝咖啡。 老板是体制内的人，思想上也完全是！他对生活的看法无助与我。 不要做徒劳无益的事情。]]></content>
  </entry>
  <entry>
    <title><![CDATA[《局外人》的主旨]]></title>
    <url>%2F2018%2F08%2F17%2F%E3%80%8A%E5%B1%80%E5%A4%96%E4%BA%BA%E3%80%8B%E7%9A%84%E4%B8%BB%E6%97%A8%2F</url>
    <content type="text"><![CDATA[1937年8月一个男人，在人们通常视为人生大事的地方（婚姻、社会地位等等）寻找人生，然后某天在翻阅一本时装目录的时候，突然了解到他对自己人生亦即时装目录上鼓吹的那种人生是何其无所谓。]]></content>
  </entry>
  <entry>
    <title><![CDATA[anaconda创建不同的运行环境]]></title>
    <url>%2F2018%2F07%2F21%2Fanaconda%E5%88%9B%E5%BB%BA%E4%B8%8D%E5%90%8C%E7%9A%84%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[CPC依赖biopython。 服务器上的python版本太低。运行 pip install biopython 报错。这种情况下安装Anaconda，并使用conda创建了一个python=2.7.9的虚拟环境。123conda create -n py2 python=2.7.9 #createsource activate py2 #activatesource deactivate #deactivate 预测lncRNA:1perl LncRNA_Finder_2.0.pl -i test.fa -k housekeeping.fa -s smallRNA.fa -o jc_test -t 1]]></content>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[《非洲的青山》]]></title>
    <url>%2F2018%2F07%2F14%2F%E3%80%8A%E9%9D%9E%E6%B4%B2%E7%9A%84%E9%9D%92%E5%B1%B1%E3%80%8B%2F</url>
    <content type="text"><![CDATA[第四章，“乔伊斯中等身高，他把眼睛用坏了。在那最后一晚，喝醉了，和乔伊斯在一起，他不断引用埃德加·基内的话：‘思维清晰、生命绚丽如战争时一样。’我知道我没有把这句话彻底弄清楚。等你见到他，他会提到三年前被打断的谈话。能见到我们这个时代伟大的作家真让人高兴。”这段话越发让我觉得我看的不是一部小说。 查了维基百科 Green Hills of Africa is a 1935 work of nonfiction by American writer Ernest Hemingway.]]></content>
  </entry>
  <entry>
    <title><![CDATA[本地BLAST]]></title>
    <url>%2F2018%2F07%2F14%2F%E6%9C%AC%E5%9C%B0BLAST%2F</url>
    <content type="text"><![CDATA[12345678# 文档末尾换行，行首添加"&gt;XX"for dir in `ls`; do echo &gt;&gt; $dir; sed -i "1i&gt;$&#123;dir%%_*&#125;" $dir; done# 合并，去除空行cat * &gt; tmp.fa &amp;&amp; grep -v '^$' tmp.fa &gt; seq.fa &amp;&amp; rm tmp.fa# 2018/8/17for i in `ls`; do t=` echo $i | cut -d "_" -f 1,2`; sed "1i&gt;$t" -i $i; done# 2018/9/4grep '^$' seq.fa | wc -l # 查看文件是否有空行 12makeblastdb -in csi.gene.fa -dbtype nuclblastn -query seq.fa -db csi.gene.fa -out output.txt -evalue 10 -outfmt 7 添加注释用vlookup函数。]]></content>
  </entry>
  <entry>
    <title><![CDATA[hexo]]></title>
    <url>%2F2018%2F07%2F13%2Fhexo%2F</url>
    <content type="text"><![CDATA[NexT教程12345hexo clean hexo g hexo s hexo d # 后面两步可合并 hexo d -g 连接Github与本地]]></content>
  </entry>
  <entry>
    <title><![CDATA[《非洲的青山》摘录]]></title>
    <url>%2F2018%2F07%2F13%2F%E3%80%8A%E9%9D%9E%E6%B4%B2%E7%9A%84%E9%9D%92%E5%B1%B1%E3%80%8B%E6%91%98%E5%BD%95%2F</url>
    <content type="text"><![CDATA[《非洲的青山》第三章，关于贝尔蒙特的注释信息中写道，“他是海明威的好朋友，曾出现在海明威的小说《死在午后》、《太阳照常升起》中。晚年受病痛折磨，和海明威一样，饮弹自尽。” 小说的第三章的后半部是我和妻子的对话 “你不觉得老爹很英俊吗？”“不觉得。”我说，“挂眼皮才英俊。”“挂眼皮那是漂亮。但你真的不认为老爹英俊吗？”……“但你真的不认为他英俊吗？”“不认为。” 第四章 P.O.M从一个行囊里拿出几本书，和老爹一起看了起来， 我想起托尔斯泰，想到战争的经历对一个作家而言是多么有益。战争是重大的主题之一，当然也是最难进行真实描写的主题之一。 雨天交通拥堵时在湿滑的沥青路和鹅卵石路上骑车的感觉。]]></content>
  </entry>
</search>
